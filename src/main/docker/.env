_JAVA_OPTIONS=-Xmx5120m -Xms2560m
SPRING_PROFILES_ACTIVE=dev,bamboo,bitbucket,jira,artemis,scheduling,athene,local
JHIPSTER_SLEEP=30 # gives time for other services to boot before the application

# ===================================================================
# Artemis configuration
# ===================================================================

ARTEMIS_COURSEARCHIVESPATH=./exports/courses         # a folder in which archived courses and exams are stored.
ARTEMIS_REPOCLONEPATH=./repos                        # a folder in which git repos for the online code editor are stored. In a multi node setup, this folder should be in a shared file system area (e_g_ based on NFS), so that user can access the same files over multiple nodes
ARTEMIS_REPODOWNLOADCLONEPATH=./repos-download       # a temporary folder, in which git repos are downloaded that are immediately deleted afterwards (e.g. exports, plagiarism checks), should NOT be in a shared file system area
ARTEMIS_BCRYPTSALTROUNDS=11  # The number of salt rounds for the bcrypt password hashing. Lower numbers make it faster but more unsecure and vice versa.
                             # Please use the bcrypt benchmark tool to determine the best number of rounds for your system. https://github.com/ls1intum/bcrypt-Benchmark

# Use of external authentication system for user management
ARTEMIS_USERMANAGEMENT_USEEXTERNAL=true

# User management password reset
ARTEMIS_USERMANAGEMENT_PASSWORDRESET=
ARTEMIS_USERMANAGEMENT_PASSWORDRESET_CREDENTIALPROVIDER=TUMonline # The credential provider which users can log in though (e.g. TUMonline)
# The password reset links for different languages
ARTEMIS_USERMANAGEMENT_PASSWORDRESET_LINKS_EN=<link>
ARTEMIS_USERMANAGEMENT_PASSWORDRESET_LINKS_DE=<link>

# External user management
ARTEMIS_USERMANAGEMENT_EXTERNAL_URL=https://jira_ase_in_tum_de
ARTEMIS_USERMANAGEMENT_EXTERNAL_USER=        # e.g. ga12abc
ARTEMIS_USERMANAGEMENT_EXTERNAL_PASSWORD=
ARTEMIS_USERMANAGEMENT_EXTERNAL_ADMINGROUPNAME=tumuser

# LDAP user management
# the whole section is optional: whether user details (such
# as the registration number) can be obtained from a LDAP service
ARTEMIS_USERMANAGEMENT_LDAP_URL=<url>
ARTEMIS_USERMANAGEMENT_LDAP_USERDN=<user-dn>
ARTEMIS_USERMANAGEMENT_LDAP_PASSWORD=<password>
ARTEMIS_USERMANAGEMENT_LDAP_BASE=<base>
ARTEMIS_USERMANAGEMENT_LDAP_ALLOWEDUSERNAMEPATTERN=^([a-z]{2}\d{2}[a-z]{3})$ # example for a TUM identifier, e.g. ab12cde

# Internal user management
ARTEMIS_USERMANAGEMENT_INTERNALADMIN_USERNAME=artemis_admin
ARTEMIS_USERMANAGEMENT_INTERNALADMIN_PASSWORD=artemis_admin

# User management registration. The whole section is optional: whether user can register in Artemis
ARTEMIS_USERMANAGEMENT_REGISTRATION_ENABLED=false
ARTEMIS_USERMANAGEMENT_REGISTRATION_ALLOWEDEMAILPATTERN=[a-zA-Z0-9_\-\.\+]+@(tum\.de|in\.tum\.de|mytum\.de)
ARTEMIS_USERMANAGEMENT_REGISTRATION_ALLOWEDEMAILPATTERNREADABLE=@tum.de, @in.tum.de, @mytum.de
ARTEMIS_USERMANAGEMENT_REGISTRATION_CLEANUPTIMEMINUTES=60 # The amount of time until nonactivated accounts are deleted automatically

ARTEMIS_USERMANAGEMENT_ACCEPTTERMS=false # whether users have to accept terms before they can login, from a privacy point of view this is not needed during education, therefore the default value is false

# the whole section is optional: whether there is a restriction for the self-registration of students in courses
ARTEMIS_USERMANAGEMENT_COURSEREGISTRATION_ALLOWEDUSERNAMEPATTERN=^([a-z]{2}\d{2}[a-z]{3})$ # example for a TUM identifier, e.g. ab12cde

ARTEMIS_USERMANAGEMENT_LOGIN_ACCOUNTNAME=TUM # optional: customization for the welcome page "please sign in with your <account-name> account"


# Artemis version control
ARTEMIS_VERSIONCONTROL_URL=https://bitbucket.ase.in.tum.de
ARTEMIS_VERSIONCONTROL_USER=<username>                 # e.g. ga12abc
ARTEMIS_VERSIONCONTROL_PASSWORD=<password>
ARTEMIS_VERSIONCONTROL_TOKEN=<token>                   # VCS API token giving Artemis full Admin access.
ARTEMIS_VERSIONCONTROL_CITOKEN=<token from the CI>     # Token generated by the CI (e.g. Jenkins) for webhooks from the VCS to the CI. Not needed for Bamboo+Bitbucket
ARTEMIS_VERSIONCONTROL_SSHTEMPLATECLONEURL=ssh://git@bitbucket.ase.in.tum.de:7999/ # Url Stem for cloning via ssh, for gitlab use 'ssh://git@artemistest2gitlab_ase_in_tum_de:2222/'
ARTEMIS_VERSIONCONTROL_SSHKEYSURLPATH=/plugins/servlet/ssh/account/keys # Url Path to access a users ssh keys, for gitlab this is '//profile/keys'
# ARTEMIS_VERSIONCONTROL_SSHPRIVATEKEYFOLDERPATH: <ssh-private-key-folder-path>       # the path to the folder in which the private ssh key file (e.g. id_rsa) is stored that can be used to clone git repos on the version control server
# ARTEMIS_VERSIONCONTROL_SSHPRIVATEKEYPASSWORD: <ssh-private-key-password>        # the password for the private ssh key
ARTEMIS_VERSIONCONTROL_DEFAULTBRANCH=main              # The branch that should be used as default branch for all newly created repositories. This does NOT have to be equal to the default branch of the VCS
ARTEMIS_VERSIONCONTROL_VERSIONCONTROLACCESSTOKEN=false # only for Gitlab setups: a Gitlab-API token can be generated for each user and used as part of the Git clone URL shown to students to allow for password-less Git operations via HTTP

# Artemis continous integration
ARTEMIS_CONTINUOUSINTEGRATION_USER=<username>                # e.g. ga12abc
ARTEMIS_CONTINUOUSINTEGRATION_PASSWORD=<password>
ARTEMIS_CONTINUOUSINTEGRATION_TOKEN=<token>                  # Enter a valid token generated in Bamboo giving Artemis full Admin access
ARTEMIS_CONTINUOUSINTEGRATION_URL=https://bamboo.ase.in.tum.de
ARTEMIS_CONTINUOUSINTEGRATION_VCSAPPLICATIONLINKNAME=LS1 Bitbucket Server # If the VCS and CI are directly linked (normally only for Bitbucket + Bamboo)
ARTEMIS_CONTINUOUSINTEGRATION_EMPTYCOMMITNECESSARY=true      # Do we need an empty commit for new exercises/repositories in order for the CI to register the repo
# Hash/key of the ci-token, equivalent e.g. to the ci-token in version-control
# Some CI systems, like Jenkins, offer a specific token that gets checked against any incoming notifications
# from a VCS trying to trigger a build plan. Only if the notification request contains the correct token, the plan
# is triggered. This can be seen as an alternative to sending an authenticated request to a REST API and then
# triggering the plan.
# In the case of Artemis, this is only really needed for the Jenkins + GitLab setup, since the GitLab plugin in
# Jenkins only allows triggering the Jenkins jobs using such a token. Furthermore, in this case, the value of the
# hudson.util.Secret is stored in the build plan, so you also have to specify this encrypted string here and NOT the actual token value itself!
# You can get this by GETting any job.xml for a job with an activated GitLab step and your token value of choice.
ARTEMIS_CONTINUOUSINTEGRATION_SECRETPUSHTOKEN=<token hash>
# Key of the saved credentials for the VCS service
# Bamboo: not needed
# Jenkins: You have to specify the key from the credentials page in Jenkins under which the user and
#          password for the VCS are stored
ARTEMIS_CONTINUOUSINTEGRATION_VCSCREDENTIALS=<credentials key>
# Key of the credentials for the Artemis notification token
# Bamboo: not needed
# Jenkins: You have to specify the key from the credentials page in Jenkins under which the authentication-token is stored
ARTEMIS_CONTINUOUSINTEGRATION_ARTEMISAUTHENTICATIONTOKENKEY=<credentials key>
# The actual value of the notification token to check against in Artemis. This is the token that gets send with
# every request the CI system makes to Artemis containing a new result after a build.
# Bamboo: The token value you use for the Server Notification Plugin
# Jenkins: The token value you use for the Server Notification Plugin and is stored under the notification-token credential above
ARTEMIS_CONTINUOUSINTEGRATION_ARTEMISAUTHENTICATIONTOKENVALUE=<token>
ARTEMIS_CONTINUOUSINTEGRATION_BUILDTIMEOUT=30 # Does cancel jenkins builds after 30 minutes to remove build that get stuck

# Artemis LTI
# only important for online courses that use LTI, can typically be ignored
ARTEMIS_LTI_ID=artemis_lti
ARTEMIS_LTI_OAUTHKEY=artemis_lti_key
ARTEMIS_LTI_OAUTHSECRET=<secret>
ARTEMIS_LTI_USERPREFIXEDX=edx_
ARTEMIS_LTI_USERPREFIXU4I=u4i_
ARTEMIS_LTI_USERGROUPNAMEEDX=edx
ARTEMIS_LTI_USERGROUPNAMEU4I=u4i

ARTEMIS_GIT_NAME=Artemis
ARTEMIS_GIT_EMAIL=artemis.in@tum.de

ARTEMIS_ATHENE_URL=http://localhost
ARTEMIS_ATHENE_BASE64SECRET=YWVuaXF1YWRpNWNlaXJpNmFlbTZkb283dXphaVF1b29oM3J1MWNoYWlyNHRoZWUzb2huZ2FpM211bGVlM0VpcAo=
ARTEMIS_ATHENE_TOKENVALIDITYINSECONDS=10800

ARTEMIS_APOLLON_CONVERSIONSERVICEURL=http://localhost:8080

# ===================================================================
# Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

LOGGING_LEVEL_ROOT=DEBUG
LOGGING_LEVEL_DE_TUM_IN_WWW1_ARTEMIS=DEBUG
LOGGING_LEVEL_TECH_JHIPSTER=DEBUG
LOGGING_LEVEL_LIQUIBASE=ERROR

SPRING_DEVTOOLS_RESTART_ENABLED=true
SPRING_DEVTOOLS_LIVERELOAD_ENABLED=false # we use Webpack dev server + BrowserSync for livereload

SPRING_JACKSON_SERIALIZATION_INDENTOUTPUT=true

SPRING_DATASOURCE_TYPE=com.zaxxer.hikari.HikariDataSource
SPRING_DATASOURCE_URL=jdbc:mysql://artemis-mysql:3306/Artemis?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC
SPRING_DATASOURCE_USERNAME=root
SPRING_DATASOURCE_PASSWORD=
SPRING_DATASOURCE_HIKARI_POOLNAME=Hikari
SPRING_DATASOURCE_HIKARI_AUTOCOMMIT=false
SPRING_DATASOURCE_HIKARI_DATASOURCEPROPERTIES_CACHEPREPSTMTS=true
SPRING_DATASOURCE_HIKARI_DATASOURCEPROPERTIES_PREPSTMTCACHESIZE=250
SPRING_DATASOURCE_HIKARI_DATASOURCEPROPERTIES_PREPSTMTCACHESQLLIMIT=2048
SPRING_DATASOURCE_HIKARI_DATASOURCEPROPERTIES_USESERVERPREPSTMTS=true

SPRING_JPA_DATABASEPLATFORM=org.hibernate.dialect.MySQL8Dialect
SPRING_JPA_DATABASE=MYSQL
SPRING_JPA_SHOWSQL=false

SPRING_LIQUIBASE_CONTEXTS=dev

SPRING_MAIL_HOST=localhost
SPRING_MAIL_PORT=25
SPRING_MAIL_USERNAME=
SPRING_MAIL_PASSWORD=

SPRING_MESSAGES_CACHEDURATION=PT1S # 1 second, see the ISO 8601 standard

SPRING_THYMELEAF_CACHE=false

SPRING_HAZELCAST_LOCALINSTANCES=true

SERVER_PORT=8080
SERVER_URL=https://artemislocal.ase.in.tum.de

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# CORS is only enabled by default with the "dev" profile, so BrowserSync can access the API
JHIPSTER_CORS_ALLOWEDORIGINPATTERNS=*
JHIPSTER_CORS_ALLOWEDMETHODS=*
JHIPSTER_CORS_ALLOWEDHEADERS=*
JHIPSTER_CORS_EXPOSEDHEADERS=Authorization,Link,X-Total-Count
JHIPSTER_CORS_ALLOWCREDENTIALS=true
JHIPSTER_CORS_MAXAGE=1800

# This token must be encoded using Base64 (you can type `echo 'secretkey'|base64` on your command line)
JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64SECRET=bXktc2VjcmV0LWtleS13aGljaC1zaG91bGQtYmUtY2hhbmdlZC1pbi1wcm9kdWN0aW9uLWFuZC1iZS1iYXNlNjQtZW5jb2RlZAo=
# Token is valid 24 hours
JHIPSTER_SECURITY_AUTHENTICATION_JWT_TOKENVALIDITYINSECONDS=86400
JHIPSTER_SECURITY_AUTHENTICATION_JWT_TOKENVALIDITYINSECONDSFORREMEMBERME=2592000

# specific JHipster mail property, for standard properties see MailProperties
JHIPSTER_MAIL_FROM=artemis@localhost
JHIPSTER_MAIL_BASEURL=http://127.0.0.1:8080

JHIPSTER_LOGGING_USEJSONFORMAT=false # By default, logs are not in Json format
# Forward logs to logstash over a socket, used by LoggingConfiguration
JHIPSTER_LOGGING_LOGSTASH_ENABLED=false
JHIPSTER_LOGGING_LOGSTASH_HOST=localhost
JHIPSTER_LOGGING_LOGSTASH_PORT=5000
JHIPSTER_LOGGING_LOGSTASH_QUEUESIZE=512

JHIPSTER_AUDITEVENTS_RETENTIONPERIOD=120 # Number of days before audit events are deleted.


# Properties to be exposed on the /info management endpoint
# Names of the tutorial groups that will be automatically added to newly created users
INFO_GUIDEDTOUR_COURSEGROUPSTUDENTS=artemis-artemistutorial-students
INFO_GUIDEDTOUR_COURSESHORTNAME=artemistutorial

INFO_GUIDEDTOUR_TOURS_CANCEL_TOUR=
INFO_GUIDEDTOUR_TOURS_CODE_EDITOR_TOUR=test
INFO_GUIDEDTOUR_TOURS_COURSE_OVERVIEW_TOUR=
INFO_GUIDEDTOUR_TOURS_COURSE_EXERCISE_OVERVIEW_TOUR=test
INFO_GUIDEDTOUR_TOURS_MODELING_TOUR=UML Class Diagram
INFO_GUIDEDTOUR_TOURS_PROGRAMMING_EXERCISE_FAIL_TOUR=test
INFO_GUIDEDTOUR_TOURS_PROGRAMMING_EXERCISE_SUCCESS_TOUR=test
INFO_GUIDEDTOUR_TOURS_TUTOR_ASSESSMENT_TOUR=Patterns in Software Engineering

INFO_CONTACT=artemis.in@tum.de  #default value, can be overridden if needed

# Specifies whether text assessment analytics service (TextAssessmentEventResource) is enabled/disabled
# default value set to true for development environment
INFO_TEXTASSESSMENTANALYTICSENABLED=true

# Eureka configuration
EUREKA_INSTANCE_PREFERIPADDRESS=true

EUREKA_CLIENT_ENABLED=false # By default, the JHipster Registry is not used in the "dev" profile
EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://admin:$${jhipster.registry.password}@localhost:8761/eureka/
